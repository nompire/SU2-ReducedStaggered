// -----------------------------------------------------------------
// Defines and subroutine declarations
// for the  reduced staggered-fermion system with SU(2) gauge symmetry
#ifndef _SON_H
#define _SON_H

#include "../include/random.h"
#include "../include/complex.h"
// -----------------------------------------------------------------



// -----------------------------------------------------------------
// Fermions are SU(2) vectors
// Scalars are either antisymmetric or self-dual matrices
#define DIMF 2
//#define NAS 6   // (DIMF / 2) * (DIMF - 1)
//#define NSD 3   // (DIMF / 4) * (DIMF - 1)

typedef struct {fcomplex e[2][2];} fsu2_matrix;
typedef struct  {dcomplex e[2][2];} dsu2_matrix;
typedef struct {
  fcomplex m01;
  float m00im, m11im;
  float space;
} fanti_hermitmat;
typedef struct {
  dcomplex m01;
  double m00im, m11im;
  double space;
} danti_hermitmat;

typedef struct { fcomplex c[DIMF]; } fvector;
//typedef struct { float e[DIMF][DIMF]; } fmatrix;
//typedef struct { float e[NAS]; } fantisym;
//typedef struct { float e[NSD]; } fselfdual;

typedef struct { dcomplex c[DIMF]; } dvector;
//typedef struct { double e[DIMF][DIMF]; } dmatrix;
//typedef struct { double e[NAS]; } dantisym;
//typedef struct { double e[NSD]; } dselfdual;

#if (PRECISION == 1)
#define su2_matrix     fsu2_matrix
#define anti_hermitmat fanti_hermitmat
#define vector         fvector
//#define matrix         fmatrix
//#define antisym        fantisym
//#define selfdual       fselfdual
#else
#define su2_matrix     dsu2_matrix
#define anti_hermitmat danti_hermimat
#define vector         dvector
//#define matrix         dmatrix
//#define antisym        dantisym
//#define selfdual       dselfdual
#endif

#define PLUS 1          // Flags for selecting D or D_adjoint
#define MINUS -1
// -----------------------------------------------------------------



// -----------------------------------------------------------------
// Subroutine definitions
// Vector operations
// In file clearvec.c
/*void clearvec(vector *v);

// In file vec_copy.c
void vec_copy(vector *a, vector *b);

// In file dumpvec.c
void dumpvec(vector *v);

// In file addvec.c
void add_vec(vector *a, vector *b, vector *c);

// In file subvec.c
void sub_vec(vector *a, vector *b, vector *c);

// In file msq_vec.c
Real magsq_vec(vector *v);

// In file dot.c
Real dot(vector *a, vector *b);

// In file s_m_vec.c
void scalar_mult_vec(vector *src, Real scalar, vector *dest);

// In file s_m_a_vec.c
void scalar_mult_add_vec(vector *a, vector *b, Real scalar, vector *dest);
// -----------------------------------------------------------------



// -----------------------------------------------------------------
// Matrix operations
// In file clear_mat.c
void clear_as(antisym *m);
void clear_sd(selfdual *m);

// In file mat_copy.c
void as_copy(antisym *a, antisym *b);
void sd_copy(selfdual *a, selfdual *b);

// In file dumpmat.c
void dumpas(antisym *m);
void dumpsd(selfdual *m);

// In file addmat.c
void add_as(antisym *a, antisym *b, antisym *c);
void add_sd(selfdual *a, selfdual *b, selfdual *c);

// In file submat.c
void sub_as(antisym *a, antisym *b, antisym *c);
void sub_sd(selfdual *a, selfdual *b, selfdual *c);

// In file msq_mat.c
Real magsq_as(antisym *m);
Real magsq_sd(selfdual *m);

// In file s_m_mat.c
void scalar_mult_as(antisym *src, Real scalar, antisym *dest);
void scalar_mult_sd(selfdual *src, Real scalar, selfdual *dest);

// In file s_m_a_mat.c
void scalar_mult_add_as(antisym *a, antisym *b, Real scalar, antisym *c);
void scalar_mult_add_sd(selfdual *a, selfdual *b, Real scalar, selfdual *c);
// -----------------------------------------------------------------

*/
//------------------------------------------------------------------
/*
* ROUTINES FOR SU(2) MATRIX OPERATIONS
*
* void mult_su2_nn(  su2_matrix *a, su2_matrix *b, su2_matrix *c  )
* matrix multiply, no adjoints
* files "m_mat_nn.c", "m_mat_nn.m4"
* void mult_su2_na( su2_matrix *a, su2_matrix *b, su2_matrix *c )
* matrix multiply, second matrix is adjoint
* files "m_mat_na.c", "m_mat_na.m4"
* void mult_su2_an( su2_matrix *a, su2_matrix *b, su2_matrix *c )
* matrix multiply, first matrix is adjoint
* files "m_mat_an.c", "m_mat_an.m4"
* Real realtrace_su2(  su2_matrix *a, su2_matrix *b )
* (Re(Tr( A_adjoint*B)) )
* file "realtr.c"
* complex trace_su2( su2_matrix *a )
* file "trace_su2.c"
* complex complextrace_su2( su2_matrix *a, su2_matrix *b )
* (Tr( A_adjoint*B))
* file "complextr.c"
* complex det_su2( su2_matrix *a )
* file "det_su2.c"
* void add_su2_matrix( su2_matrix *a, su2_matrix *b, su2_matrix *c )
* file "addmat.c"
* void sub_su2_matrix( su2_matrix *a, su2_matrix *b, su2_matrix *c )
* file "submat.c"
* void scalar_mult_su2_matrix( su2_matrix *a, Real s, su2_matrix *b )
* file "s_m_mat.c"
* void scalar_mult_add_su2_matrix( su2_matrix *a, su2_matrix *b,
* Real s, su2_matrix *c)
* file "s_m_a_mat.c"
* void scalar_mult_sub_su2_matrix( su2_matrix *a, su2_matrix *b,
* Real s, su2_matrix *c)
* file "s_m_s_mat.c"
* void c_scalar_mult_su2mat( su2_matrix *src, complex *phase, su2_matrix *dest)
* file "cs_m_mat.c"
* void c_scalar_mult_add_su2mat( su2_matrix *m1, su2_matrix *m2,
* complex *phase, su2_matrix *m3)
* file "cs_m_a_mat.c"
* void c_scalar_mult_sub_su2mat( su2_matrix *m1, su2_matrix *m2,
* complex *phase, su2_matrix *m3)
* file "cs_m_s_mat.c"
* void su2_adjoint( su2_matrix *a, su2_matrix *b )
* file "su2_adjoint.c"
* void make_anti_hermitian( su2_matrix *m3,  anti_hermitmat *ah3 )
* file "make_ahmat.c"
* void random_anti_hermitian( anti_hermitmat *mat_antihermit, double_prn *prn_pt )
* (prn_pt passed through to myrand())
* file "rand_ahmat.c"
* void uncompress_anti_hermitian( anti_hermitmat *mat_anti, su2_matrix *mat )
* file "uncmp_ahmat.c"
* void compress_anti_hermitian( su2_matrix *mat, anti_hermitmat *mat_anti)
* file "cmp_ahmat.c"
* void clear_su2mat( su2_matrix *dest );
*       file clear_mat.c
*          dest <- 0.0
* void su2mat_copy( su2_matrix *a, su2_matrix *b )
* file "su2mat_copy.c"
* void dumpmat( su2_matrix *m )
*       file "dumpmat.c"
* void dumptensor4( su2_tensor4 *m )
*       file "dumpmat.c"
* void eigen_su2_UdU( su2_matrix *U, Real *g0, Real *g1, Real *g2)
*       file "eigen_su2_UdU.c" */





// -----------------------------------------------------------------
// Miscellaneous routines
// In file gaussrand.c
Real gaussian_rand_no(double_prn *prn_pt);

#include "../include/int32type.h"
void byterevn(int32type w[], int n);
void byterevn64(int32type w[], int n);

#endif
// -----------------------------------------------------------------
